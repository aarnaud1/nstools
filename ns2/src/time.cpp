// MIT License
//
// Copyright (c) 2019 Agenium Scale
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <ns2/config.hpp>
#include <ns2/time.hpp>

#include <chrono>
#include <ctime>
#include <thread>

#ifdef NS2_IS_MSVC
#include <windows.h>
#endif

namespace ns2 {

// ----------------------------------------------------------------------------
// timestamp

double timestamp_ns() {
#ifdef NS2_IS_MSVC
  LARGE_INTEGER freq, ts;
  // There is no need to check for errors because on Windows XP and later
  // no error are generated by this function, cf. [https://docs.microsoft.com
  //     /en-us/windows/win32/api/profileapi
  //     /nf-profileapi-queryperformancefrequency].
  QueryPerformanceFrequency(&freq);
  QueryPerformanceCounter(&ts);
  return double(ts.QuadPart) / double(freq.QuadPart) * 1000000000.0;
#else
  timespec ts;
  // There is no need to check for errors because possible errors will not
  // be generated, cf. clock_gettime(3).
  clock_gettime(CLOCK_MONOTONIC, &ts);
  return double(ts.tv_sec) * 1000000000.0 + double(ts.tv_nsec);
#endif
}

double timestamp_us() { return ns2::timestamp_ns() / 1000.0; }

double timestamp_ms() { return ns2::timestamp_ns() / (1000.0 * 1000.0); }

double timestamp_s() {
  return ns2::timestamp_ns() / (1000.0 * 1000.0 * 1000.0);
}

double timestamp_min() {
  return ns2::timestamp_ns() / (60 * 1000.0 * 1000.0 * 1000.0);
}

double timestamp_h() {
  return ns2::timestamp_ns() / (60.0 * 60.0 * 1000.0 * 1000.0 * 1000.0);
}

double timestamp_d() {
  return ns2::timestamp_ns() / (24.0 * 60.0 * 60.0 * 1000.0 * 1000.0 * 1000.0);
}

// ----------------------------------------------------------------------------
// tic & toc

double tic() { return ns2::timestamp_ns(); }

double toc(double const timestamp_ns) {
  return ns2::timestamp_ns() - timestamp_ns;
}

// ----------------------------------------------------------------------------
// sleep

void sleep_ms(int const ms) {
  std::this_thread::sleep_for(std::chrono::milliseconds(ms));
}

// ----------------------------------------------------------------------------

} // namespace ns2
